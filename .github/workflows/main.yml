name: Test, build and deploy

on:
  push: {}
  pull_request: {}
  schedule:
    - cron: '0 0 * * *'

env:
  CI: true
  NODE_VERSION: 14

jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Prepare env vars
        shell: bash
        run: |
          echo "YARN_CACHE_FOLDER=$(yarn cache dir)" >> $GITHUB_ENV
      - name: Yarn cache
        if: startsWith(github.ref, 'refs/tags/') != true
        uses: actions/cache@v2
        with:
          path: ${{ env.YARN_CACHE_FOLDER }}
          key: yarn-${{ matrix.os }}-${{ hashFiles('yarn.lock') }}
      - name: NW.js cache
        if: startsWith(github.ref, 'refs/tags/') != true
        uses: actions/cache@v2
        with:
          path: build/cache/
          key: nwjs-${{ matrix.os }}-${{ hashFiles('src/config/main.json') }}
      - name: Install dependencies
        shell: bash
        run: yarn install --pure-lockfile --no-progress --non-interactive
      - name: Test
        shell: bash
        run: |
          if [[ "$(uname)" == "Linux" ]]; then
            xvfb-run --auto-servernum yarn run grunt test:coverage
          else
            yarn run grunt test:coverage
          fi
      - name: I18n
        run: yarn run grunt webpack:i18n
      - name: Build
        run: yarn run grunt clean:tmp_prod webpack:prod
      - name: Upload coverage data
        uses: codecov/codecov-action@v2
        with:
          name: os:${{ matrix.os }}
          file: build/tmp/coverage/coverage.json

  debug-build:
    name: Debug build
    if: github.repository == 'streamlink/streamlink-twitch-gui' && github.event_name == 'schedule'
    needs:
      - test
    runs-on: ubuntu-20.04
    permissions:
      actions: write
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check previous run
        run: ./.github/workflows/check-previous-run.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Prepare env vars
        run: |
          echo "SOURCE_DATE_EPOCH=$(git show -s --format=%ct "${GITHUB_REF}")" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          yarn install --pure-lockfile --no-progress --non-interactive
          sudo apt-get install pigz
          ./.github/workflows/install-wine.sh
      - name: Build
        run: yarn run grunt clean:tmp_debug webpack:debug
      - name: Compile & package
        run: yarn run grunt clean:dist dist:archive_win64:archive_osx64:archive_linux64:debug
      - name: Get file names for artifact upload
        id: names
        run: |
          echo ::set-output name=archive_win64::$(basename dist/streamlink-twitch-gui-*-win64.zip)
          echo ::set-output name=upload_win64::$(basename dist/streamlink-twitch-gui-*-win64.zip | sed 's/\.zip$//')
          echo ::set-output name=archive_osx64::$(basename dist/streamlink-twitch-gui-*-macOS.tar.gz)
          echo ::set-output name=upload_osx64::$(basename dist/streamlink-twitch-gui-*-macOS.tar.gz | sed 's/\.tar\.gz$//')
          echo ::set-output name=archive_linux64::$(basename dist/streamlink-twitch-gui-*-linux64.tar.gz)
          echo ::set-output name=upload_linux64::$(basename dist/streamlink-twitch-gui-*-linux64.tar.gz | sed 's/\.tar\.gz$//')
      - name: Upload artifact (win64)
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ steps.names.outputs.archive_win64 }}
          path: dist/${{ steps.names.outputs.archive_win64 }}
      - name: Upload artifact (osx64)
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ steps.names.outputs.archive_osx64 }}
          path: dist/${{ steps.names.outputs.archive_osx64 }}
      - name: Upload artifact (linux64)
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ steps.names.outputs.archive_linux64 }}
          path: dist/${{ steps.names.outputs.archive_linux64 }}

  release:
    name: New release
    if: github.repository == 'streamlink/streamlink-twitch-gui' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      - test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Prepare env vars
        run: |
          echo "SOURCE_DATE_EPOCH=$(git show -s --format=%ct "${GITHUB_REF}")" >> $GITHUB_ENV
      - name: Install dependencies
        run: |
          yarn install --pure-lockfile --no-progress --non-interactive
          sudo apt-get install pigz nsis appstream{,-util}
          ./.github/workflows/install-wine.sh
      - name: Build
        run: yarn run grunt clean:tmp_prod webpack:prod
      - name: Compile & package
        run: yarn run grunt clean:dist dist:all
      - name: Deploy
        env:
          RELEASES_API_KEY: ${{ secrets.RELEASES_API_KEY }}
        run: yarn run grunt deploy:github
